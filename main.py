import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
import sqlite3
import config

# --- FSM ---
class Order(StatesGroup):
    platform = State()
    login = State()
    password = State()
    wait_for_payment = State()
    wait_for_check = State()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    with sqlite3.connect("database.db") as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            credits INTEGER,
            price INTEGER,
            platform TEXT,
            login TEXT,
            password TEXT,
            status TEXT DEFAULT 'waiting'
        )''')
        conn.commit()

# --- –ó–∞–ø—É—Å–∫ ---
bot = Bot(token=config.BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(CommandStart())
async def start(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="500 –∫—Ä - 450‚ÇΩ", callback_data="credits_500")
    kb.button(text="1100 –∫—Ä - 800‚ÇΩ", callback_data="credits_1100")
    kb.button(text="3000 –∫—Ä - 1800‚ÇΩ", callback_data="credits_3000")
    kb.button(text="6500 –∫—Ä - 3600‚ÇΩ", callback_data="credits_6500")
    kb.adjust(2)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤:", reply_markup=kb.as_markup())

# --- –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ ---
@dp.callback_query(F.data.startswith("credits_"))
async def choose_credits(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split("_")
    credits_map = {
        "500": 450,
        "1100": 800,
        "3000": 1800,
        "6500": 3600,
    }
    credits = int(data[1])
    price = credits_map[str(credits)]
    await state.update_data(credits=credits, price=price)
    await callback.message.answer(f"–¢—ã –≤—ã–±—Ä–∞–ª {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ {price}‚ÇΩ\n–£–∫–∞–∂–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (Epic, Steam, PS, Xbox):")
    await state.set_state(Order.platform)

@dp.message(Order.platform)
async def get_platform(message: Message, state: FSMContext):
    await state.update_data(platform=message.text.strip())
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –ª–æ–≥–∏–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:")
    await state.set_state(Order.login)

@dp.message(Order.login)
async def get_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –ø–∞—Ä–æ–ª—å:")
    await state.set_state(Order.password)

@dp.message(Order.password)
async def get_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text.strip())
    data = await state.get_data()
    with sqlite3.connect("database.db") as conn:
        c = conn.cursor()
        c.execute("INSERT INTO orders (user_id, username, credits, price, platform, login, password) VALUES (?, ?, ?, ?, ?, ?, ?)", (
            message.from_user.id,
            message.from_user.username,
            data['credits'],
            data['price'],
            data['platform'],
            data['login'],
            data['password'],
        ))
        order_id = c.lastrowid
        conn.commit()
    await message.answer(
        f"üîî –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{data['price']}‚ÇΩ</b> –Ω–∞ –∫–∞—Ä—Ç—É: <code>2204 2401 7179 1066</code>\n"
        f"üí¨ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: <b>#{order_id:04}</b>\n"
        f"üì∑ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞."
    )
    await state.update_data(order_id=order_id)
    await state.set_state(Order.wait_for_check)

@dp.message(Order.wait_for_check, F.photo)
async def get_payment_check(message: Message, state: FSMContext):
    data = await state.get_data()
    admin_id = config.OPERATOR_ID
    caption = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{data['order_id']:04}\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
        f"üí≥ –ö—Ä–µ–¥–∏—Ç–æ–≤: {data['credits']}\nüí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ\n"
        f"üïπ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {data['platform']}\nüîë –õ–æ–≥–∏–Ω: {data['login']}\nüîê –ü–∞—Ä–æ–ª—å: {data['password']}\n"
    )
    photo_id = message.photo[-1].file_id
    await bot.send_photo(admin_id, photo_id, caption=caption)
    await message.answer("‚úÖ –°–∫—Ä–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    await state.clear()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())